"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSubChannelWarningSendSubscription = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@twurple/common");
const EventSubSubscription_1 = require("./EventSubSubscription");
const EventSubChannelWarningSendEvent_1 = require("../events/EventSubChannelWarningSendEvent");
/** @internal */
let EventSubChannelWarningSendSubscription = class EventSubChannelWarningSendSubscription extends EventSubSubscription_1.EventSubSubscription {
    constructor(handler, client, _broadcasterId, _moderatorId) {
        super(handler, client);
        this._broadcasterId = _broadcasterId;
        this._moderatorId = _moderatorId;
        /** @protected */ this._cliName = '';
    }
    get id() {
        return `channel.warning.send.${this._broadcasterId}.${this._moderatorId}`;
    }
    get authUserId() {
        return this._moderatorId;
    }
    transformData(data) {
        return new EventSubChannelWarningSendEvent_1.EventSubChannelWarningSendEvent(data, this._client._apiClient);
    }
    async _subscribe() {
        return await this._client._apiClient.asUser(this._moderatorId, async (ctx) => await ctx.eventSub.subscribeToChannelWarningSendEvents(this._broadcasterId, await this._getTransportOptions()));
    }
};
exports.EventSubChannelWarningSendSubscription = EventSubChannelWarningSendSubscription;
exports.EventSubChannelWarningSendSubscription = EventSubChannelWarningSendSubscription = tslib_1.__decorate([
    (0, common_1.rtfm)('eventsub-base', 'EventSubSubscription')
], EventSubChannelWarningSendSubscription);
