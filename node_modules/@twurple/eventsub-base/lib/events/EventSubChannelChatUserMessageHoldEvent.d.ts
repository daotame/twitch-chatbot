import type { HelixUser } from '@twurple/api';
import { DataObject } from '@twurple/common';
import { type EventSubAutoModMessagePart } from './common/EventSubAutoModMessage.external';
import { type EventSubChannelChatUserMessageHoldEventData } from './EventSubChannelChatUserMessageHoldEvent.external';
/**
 * An EventSub event representing a user's notification about their chat message is being held by AutoMod.
 */
export declare class EventSubChannelChatUserMessageHoldEvent extends DataObject<EventSubChannelChatUserMessageHoldEventData> {
    /**
     * The ID of the broadcaster in whose chat AutoMod held the message.
     */
    get broadcasterId(): string;
    /**
     * The name of the broadcaster in whose chat AutoMod held the message.
     */
    get broadcasterName(): string;
    /**
     * The display name of the broadcaster in whose chat AutoMod held the message.
     */
    get broadcasterDisplayName(): string;
    /**
     * Gets more information about the broadcaster.
     */
    getBroadcaster(): Promise<HelixUser>;
    /**
     * The ID of the user whose message is being held by AutoMod.
     */
    get userId(): string;
    /**
     * The name of the user whose message is being held by AutoMod.
     */
    get userName(): string;
    /**
     * The display name of the user whose message is being held by AutoMod.
     */
    get userDisplayName(): string;
    /**
     * Gets more information about the user.
     */
    getUser(): Promise<HelixUser>;
    /**
     * The ID of the message held by AutoMod.
     */
    get messageId(): string;
    /**
     * The plain text of the message.
     */
    get messageText(): string;
    /**
     * The pre-parsed message parts.
     */
    get messageParts(): EventSubAutoModMessagePart[];
}
//# sourceMappingURL=EventSubChannelChatUserMessageHoldEvent.d.ts.map