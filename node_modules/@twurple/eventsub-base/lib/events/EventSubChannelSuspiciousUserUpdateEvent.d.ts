import type { HelixUser } from '@twurple/api';
import { DataObject } from '@twurple/common';
import { type EventSubChannelSuspiciousUserUpdateEventData } from './EventSubChannelSuspiciousUserUpdateEvent.external';
import type { EventSubChannelSuspiciousUserLowTrustStatus } from './common/EventSubChannelSuspiciousUserLowTrustStatus';
/**
 * An EventSub event representing a suspicious user being updated in a channel.
 */
export declare class EventSubChannelSuspiciousUserUpdateEvent extends DataObject<EventSubChannelSuspiciousUserUpdateEventData> {
    /**
     * The ID of the channel where the treatment for a suspicious user was updated.
     */
    get broadcasterId(): string;
    /**
     * The name of the channel where the treatment for a suspicious user was updated.
     */
    get broadcasterName(): string;
    /**
     * The display name of the channel where the treatment for a suspicious user was updated.
     */
    get broadcasterDisplayName(): string;
    /**
     * Gets more information about the broadcaster.
     */
    getBroadcaster(): Promise<HelixUser>;
    /**
     * The ID of the moderator that updated the treatment for a suspicious user.
     */
    get moderatorId(): string;
    /**
     * The name of the moderator that updated the treatment for a suspicious user.
     */
    get moderatorName(): string;
    /**
     * The display name of the moderator that updated the treatment for a suspicious user.
     */
    get moderatorDisplayName(): string;
    /**
     * Gets more information about the moderator.
     */
    getModerator(): Promise<HelixUser>;
    /**
     * The ID of the suspicious user whose treatment was updated.
     */
    get userId(): string;
    /**
     * The name of the suspicious user whose treatment was updated.
     */
    get userName(): string;
    /**
     * The display name of the suspicious user whose treatment was updated.
     */
    get userDisplayName(): string;
    /**
     * Gets more information about the user whose treatment was updated.
     */
    getUser(): Promise<HelixUser>;
    /**
     * The status set for the suspicious user.
     */
    get lowTrustStatus(): EventSubChannelSuspiciousUserLowTrustStatus;
}
//# sourceMappingURL=EventSubChannelSuspiciousUserUpdateEvent.d.ts.map