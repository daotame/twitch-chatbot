import { DataObject } from '@twurple/common';
import type { HelixUser } from '@twurple/api';
import { type EventSubChannelSharedChatSessionBeginEventData } from './EventSubChannelSharedChatSessionBeginEvent.external';
import { EventSubChannelSharedChatSessionParticipant } from './common/EventSubChannelSharedChatSessionParticipant';
/**
 * An EventSub event representing the start of a shared chat session in a channel.
 */
export declare class EventSubChannelSharedChatSessionBeginEvent extends DataObject<EventSubChannelSharedChatSessionBeginEventData> {
    /**
     * The unique identifier for the shared chat session.
     */
    get sessionId(): string;
    /**
     * The ID of the broadcaster in the subscription condition which is now active in the shared chat session.
     */
    get broadcasterId(): string;
    /**
     * The name of the broadcaster in the subscription condition which is now active in the shared chat session.
     */
    get broadcasterName(): string;
    /**
     * The display name of the broadcaster in the subscription condition which is now active in the shared chat session.
     */
    get broadcasterDisplayName(): string;
    /**
     * Gets information about the broadcaster.
     */
    getBroadcaster(): Promise<HelixUser>;
    /**
     * The ID of the host broadcaster.
     */
    get hostBroadcasterId(): string;
    /**
     * The name of the host broadcaster.
     */
    get hostBroadcasterName(): string;
    /**
     * The display name of the host broadcaster.
     */
    get hostBroadcasterDisplayName(): string;
    /**
     * Gets information about the broadcaster.
     */
    getHostBroadcaster(): Promise<HelixUser>;
    /**
     * The list of all participants currently in the shared chat session.
     */
    get participants(): EventSubChannelSharedChatSessionParticipant[];
}
//# sourceMappingURL=EventSubChannelSharedChatSessionBeginEvent.d.ts.map