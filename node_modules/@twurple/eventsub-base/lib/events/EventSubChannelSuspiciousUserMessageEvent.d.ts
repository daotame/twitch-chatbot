import type { HelixUser } from '@twurple/api';
import { DataObject } from '@twurple/common';
import type { EventSubChannelSuspiciousUserLowTrustStatus } from './common/EventSubChannelSuspiciousUserLowTrustStatus';
import { type EventSubChannelBanEvasionEvaluation, type EventSubChannelSuspiciousUserType, type EventSubChannelSuspiciousUserMessageEventData, type EventSubChannelSuspiciousUserMessagePart } from './EventSubChannelSuspiciousUserMessageEvent.external';
/**
 * An EventSub event representing a message sent by a suspicious user in a channel.
 */
export declare class EventSubChannelSuspiciousUserMessageEvent extends DataObject<EventSubChannelSuspiciousUserMessageEventData> {
    /**
     * The ID of the channel in which a suspicious user sent the message.
     */
    get broadcasterId(): string;
    /**
     * The name of the channel in which a suspicious user sent the message.
     */
    get broadcasterName(): string;
    /**
     * The display name of the channel in which a suspicious user sent the message.
     */
    get broadcasterDisplayName(): string;
    /**
     * Gets more information about the broadcaster.
     */
    getBroadcaster(): Promise<HelixUser>;
    /**
     * The ID of the user who sent the message.
     */
    get userId(): string;
    /**
     * The name of the user who sent the message.
     */
    get userName(): string;
    /**
     * The display name of the user who sent the message.
     */
    get userDisplayName(): string;
    /**
     * Gets more information about the user whose treatment was updated.
     */
    getUser(): Promise<HelixUser>;
    /**
     * The status set for the suspicious user.
     */
    get lowTrustStatus(): EventSubChannelSuspiciousUserLowTrustStatus;
    /**
     * A list of channel IDs where the suspicious user is also banned.
     */
    get sharedBanChannelIds(): string[];
    /**
     * User types (if any) that apply to the suspicious user.
     */
    get types(): EventSubChannelSuspiciousUserType[];
    /**
     * A ban evasion likelihood value (if any) that as been applied to the user automatically by Twitch.
     */
    get banEvasionEvaluation(): EventSubChannelBanEvasionEvaluation;
    /**
     * The UUID that identifies the message.
     */
    get messageId(): string;
    /**
     * The chat message in plain text.
     */
    get messageText(): string;
    /**
     * Ordered list of chat message fragments.
     */
    get messageParts(): EventSubChannelSuspiciousUserMessagePart[];
}
//# sourceMappingURL=EventSubChannelSuspiciousUserMessageEvent.d.ts.map