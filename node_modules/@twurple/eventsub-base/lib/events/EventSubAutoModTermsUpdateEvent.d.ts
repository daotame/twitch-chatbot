import type { HelixUser } from '@twurple/api';
import { DataObject } from '@twurple/common';
import { type EventSubAutoModTermsUpdateAction, type EventSubAutoModTermsUpdateEventData } from './EventSubAutoModTermsUpdateEvent.external';
/**
 * An EventSub event representing AutoMod terms being updated in a channel.
 */
export declare class EventSubAutoModTermsUpdateEvent extends DataObject<EventSubAutoModTermsUpdateEventData> {
    /**
     * The ID of the broadcaster in whose channel AutoMod terms were updated.
     */
    get broadcasterId(): string;
    /**
     * The name of the broadcaster in whose channel AutoMod terms were updated.
     */
    get broadcasterName(): string;
    /**
     * The display name of the broadcaster in whose channel AutoMod terms were updated.
     */
    get broadcasterDisplayName(): string;
    /**
     * Gets more information about the broadcaster.
     */
    getBroadcaster(): Promise<HelixUser>;
    /**
     * The ID of the moderator who updated AutoMod terms.
     */
    get moderatorId(): string;
    /**
     * The name of the moderator who updated AutoMod terms.
     */
    get moderatorName(): string;
    /**
     * The display name of the moderator who updated AutoMod terms.
     */
    get moderatorDisplayName(): string;
    /**
     * Gets more information about the moderator.
     */
    getModerator(): Promise<HelixUser>;
    /**
     * The status change applied to the terms.
     */
    get action(): EventSubAutoModTermsUpdateAction;
    /**
     * Indicates whether this term was added due to an AutoMod message resolution action.
     */
    get fromAutoMod(): boolean;
    /**
     * The list of terms that had a status change.
     */
    get terms(): string[];
}
//# sourceMappingURL=EventSubAutoModTermsUpdateEvent.d.ts.map