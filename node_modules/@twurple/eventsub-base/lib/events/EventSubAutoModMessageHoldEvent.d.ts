import type { HelixUser } from '@twurple/api';
import { DataObject } from '@twurple/common';
import { type EventSubAutoModMessageHoldEventData } from './EventSubAutoModMessageHoldEvent.external';
import { type EventSubAutoModLevel } from './common/EventSubAutoModLevel';
import { type EventSubAutoModMessagePart } from './common/EventSubAutoModMessage.external';
/**
 * An EventSub event representing chat message being held by AutoMod in a channel.
 */
export declare class EventSubAutoModMessageHoldEvent extends DataObject<EventSubAutoModMessageHoldEventData> {
    /**
     * The ID of the broadcaster in whose channel the message has been held by AutoMod.
     */
    get broadcasterId(): string;
    /**
     * The name of the broadcaster in whose channel the message has been held by AutoMod.
     */
    get broadcasterName(): string;
    /**
     * The display name of the broadcaster in whose channel the message has been held by AutoMod.
     */
    get broadcasterDisplayName(): string;
    /**
     * Gets more information about the broadcaster.
     */
    getBroadcaster(): Promise<HelixUser>;
    /**
     * The ID of the user whose message has been held by AutoMod.
     */
    get userId(): string;
    /**
     * The name of the user whose message has been held by AutoMod.
     */
    get userName(): string;
    /**
     * The display name of the user whose message has been held by AutoMod.
     */
    get userDisplayName(): string;
    /**
     * Gets more information about the user.
     */
    getUser(): Promise<HelixUser>;
    /**
     * The ID of the chat message held by AutoMod.
     */
    get messageId(): string;
    /**
     * The plain text of the message.
     */
    get messageText(): string;
    /**
     * The pre-parsed message parts.
     */
    get messageParts(): EventSubAutoModMessagePart[];
    /**
     * The category of the message.
     */
    get category(): string;
    /**
     * The level of severity.
     */
    get level(): EventSubAutoModLevel;
    /**
     * The date of when AutoMod held the message.
     */
    get holdDate(): Date;
}
//# sourceMappingURL=EventSubAutoModMessageHoldEvent.d.ts.map