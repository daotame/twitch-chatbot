"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSubChannelUnbanRequestModerationEvent = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@twurple/common");
const EventSubChannelBaseModerationEvent_1 = require("./EventSubChannelBaseModerationEvent");
/**
 * An EventSub event representing a moderator resolving an unban request on a channel.
 */
let EventSubChannelUnbanRequestModerationEvent = class EventSubChannelUnbanRequestModerationEvent extends EventSubChannelBaseModerationEvent_1.EventSubChannelBaseModerationEvent {
    /** @internal */
    constructor(data, action, client) {
        super(data, client);
        this.moderationAction = action;
    }
    /**
     * Whether the unban request was approved or denied.
     */
    get isApproved() {
        return this[common_1.rawDataSymbol].unban_request.is_approved;
    }
    /**
     * The ID of the banned user.
     */
    get userId() {
        return this[common_1.rawDataSymbol].unban_request.user_id;
    }
    /**
     * The name of the banned user.
     */
    get userName() {
        return this[common_1.rawDataSymbol].unban_request.user_login;
    }
    /**
     * The display name of the banned user.
     */
    get userDisplayName() {
        return this[common_1.rawDataSymbol].unban_request.user_name;
    }
    /**
     * Gets more information about the user.
     */
    async getUser() {
        return await this._client.users.getUserById(this[common_1.rawDataSymbol].unban_request.user_id);
    }
    /**
     * The message included by the moderator explaining their approval or denial.
     */
    get moderatorMessage() {
        return this[common_1.rawDataSymbol].unban_request.moderator_message;
    }
};
exports.EventSubChannelUnbanRequestModerationEvent = EventSubChannelUnbanRequestModerationEvent;
exports.EventSubChannelUnbanRequestModerationEvent = EventSubChannelUnbanRequestModerationEvent = tslib_1.__decorate([
    (0, common_1.rtfm)('eventsub-base', 'EventSubChannelUnbanRequestModerationEvent', 'broadcasterId')
], EventSubChannelUnbanRequestModerationEvent);
