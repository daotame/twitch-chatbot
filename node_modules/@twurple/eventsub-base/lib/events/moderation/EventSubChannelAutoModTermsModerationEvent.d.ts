import { EventSubChannelBaseModerationEvent } from './EventSubChannelBaseModerationEvent';
import { type EventSubChannelAutomodTermsModerationEventAction, type EventSubChannelAutomodTermsModerationEventList, type EventSubChannelModerationAction } from './EventSubChannelModerationEvent.external';
/**
 * An EventSub event representing a moderator managing AutoMod terms on a channel.
 */
export declare class EventSubChannelAutoModTermsModerationEvent extends EventSubChannelBaseModerationEvent {
    readonly moderationAction: Extract<EventSubChannelModerationAction, 'add_blocked_term' | 'add_permitted_term' | 'remove_blocked_term' | 'remove_permitted_term'>;
    /**
     * Whether the terms were added or removed.
     */
    get action(): EventSubChannelAutomodTermsModerationEventAction;
    /**
     * Whether the terms are blocked or permitted.
     */
    get list(): EventSubChannelAutomodTermsModerationEventList;
    /**
     * The list of terms being added or removed.
     */
    get terms(): string[];
    /**
     * Whether the terms were added/removed due to an Automod resolution action.
     */
    get fromAutoMod(): boolean;
}
//# sourceMappingURL=EventSubChannelAutoModTermsModerationEvent.d.ts.map