import type { HelixUser } from '@twurple/api';
import { DataObject } from '@twurple/common';
import { type EventSubChannelWarningSendEventData } from './EventSubChannelWarningSendEvent.external';
/**
 * An EventSub event representing a warning sent to a user.
 */
export declare class EventSubChannelWarningSendEvent extends DataObject<EventSubChannelWarningSendEventData> {
    /**
     * The ID of the broadcaster.
     */
    get broadcasterId(): string;
    /**
     * The name of the broadcaster.
     */
    get broadcasterName(): string;
    /**
     * The display name of the broadcaster.
     */
    get broadcasterDisplayName(): string;
    /**
     * Gets more information about the broadcaster.
     */
    getBroadcaster(): Promise<HelixUser>;
    /**
     * The ID of the moderator who sent the warning.
     */
    get moderatorId(): string;
    /**
     * The name of the moderator who sent the warning.
     */
    get moderatorName(): string;
    /**
     * The display name of the moderator who sent the warning.
     */
    get moderatorDisplayName(): string;
    /**
     * Gets more information about the moderator.
     */
    getModerator(): Promise<HelixUser>;
    /**
     * The ID of the user being warned.
     */
    get userId(): string;
    /**
     * The name of the user being warned.
     */
    get userName(): string;
    /**
     * The display name of the user being warned.
     */
    get userDisplayName(): string;
    /**
     * Gets more information about the user.
     */
    getUser(): Promise<HelixUser>;
    /**
     * The reason given for the warning, or `null` if no reason is specified.
     */
    get reason(): string | null;
    /**
     * The chat rules cited for the warning. This ts an empty array if no rules are cited.
     */
    get chatRulesCited(): string[];
}
//# sourceMappingURL=EventSubChannelWarningSendEvent.d.ts.map